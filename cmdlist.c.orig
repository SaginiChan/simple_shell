#include "shell.h"
/**
 * add_node_end - adds node at the end of the list
 * @head: its the head of the lis
 * @str: string data to add
 * Return: returns the pointer to address of the added node
*/
cmd_n_list *add_node_end_sym(cmd_n_list **head, const char *str, char *sym)
{
    char *strd = _strdup((char *)str);
    int len = 0;
    cmd_n_list *temp = malloc(sizeof(cmd_n_list)), *ptr;

    if (temp == NULL)
    {
        return (NULL);
    }

    ptr = *head;

    if (strd == NULL)
        len = 0;
    else
    {
        len = strlen(strd);
    }

    temp->str = strd;
    temp->symbol = sym;
    temp->len = len;
    temp->next = NULL;

    if (ptr == NULL)
    {
        *head = temp;
    }
    else
    {
        while (ptr->next != NULL)
        {
            ptr = ptr->next;
        }

        ptr->next = temp;
    }

    return (temp);
}
/**
 * add_node_end - adds node at the end of the list
 * @head: its the head of the lis
 * @str: string data to add
 * Return: returns the pointer to address of the added node
*/
cmd_list *add_node_end(cmd_list **head, const char *str)
{
	char *strd = _strdup((char *)str);
	int len = 0;
	cmd_list *temp = malloc(sizeof(cmd_list)), *ptr;

	if (temp == NULL)
	{
		return (NULL);
	}

	ptr = *head;

	if (strd == NULL)
		len = 0;
	else
	{
		len = _strlen(strd);
	}

	temp->str = strd;
	temp->len = len;
	temp->next = NULL;

	if (ptr == NULL)
	{
		*head = temp;
	}
	else
	{
		while (ptr->next != NULL)
		{
			ptr = ptr->next;
		}

		ptr->next = temp;
	}

	return (temp);
}
/**
 * free_list - frees every node in the list
 * @head: list head
*/
void free_list(cmd_list *head)
{
	cmd_list *temp;

	while (head != NULL)
	{
		temp = head;
		head = head->next;
		free(temp->str);
		free(temp);
	}
}
/**
 * process_commands - prints contents of the list
 * @h: poiter to the first node
 * 
 * Return: returns number of nodes in the lis
 * 
*/
size_t process_commands(const cmd_list *h, g_var *sh, cmd_n_list **head)
{
    int nodes = 0;

    while (h != NULL)
    {
        if (h->str == NULL)
        {
            printf("[0] %s\n", "nil");
        }
        else
        {
            free_arr(&(sh->tokens), sh->num_tokens);
            free(sh->command);
            sh->command  = _strdup(h->str);
            remove_emptyspaces(&(sh->command));
            sh->num_tokens = tokenize(&(sh->tokens), sh->command, " ");
           
            if (hasSymbols(&sh))
            {
                                
                check_symbols(&sh, head);
                process_cmd_symbols(*head, sh);
                free_listint_safe(head);
                (sh->process_id)++;
                free_arr(&(sh->tokens), sh->num_tokens);
                 free(sh->command);
                sh->command = NULL;
                cleanup(sh);
                h = h->next;
                nodes++;
                continue;
                    
            }
		    if (get_built_in(sh, (sh->tokens)[0]))
            {
                get_built_in(sh, (sh->tokens)[0])(&sh);
                (sh->process_id)++;
                free_arr(&(sh->tokens), sh->num_tokens);
                free(sh->command);
                sh->command = NULL;
                cleanup(sh);
                h = h->next;
                nodes++;
                continue;
            }
            free(sh->command);
            sh->command = NULL;
            sh->command = check_cmd_exist(sh->tokens[0]);
            if (sh->command)
            {
                    execute(sh, sh->tokens,  sh->environs);
                    h = h->next;
                    nodes++;
                    continue;
            }
            else
            {
                not_found(sh->prog_name, (sh->tokens)[0], sh->process_id, "not found");
                (sh->process_id)++;
            }
            free_arr(&(sh->tokens), sh->num_tokens);
            cleanup(sh);
        }
        h = h->next;
        nodes++;
    }

    return (nodes);
}
/**
 * process_commands - prints contents of the list
 * @h: poiter to the first node
 * 
 * Return: returns number of nodes in the lis
 * 
*/
size_t process_cmd_symbols(const cmd_n_list *h, g_var *sh)
{
    int nodes = 0, flag = 0;

    while (h != NULL)
    {
        if (h->symbol == NULL)
            return (nodes);
        if (_strcmp(h->symbol, "&&") == 0 && flag == 1)
        {
            h = h->next;
            nodes++;/* flag = 0 */
            flag = 0;
        }
        while (h != NULL && flag == 1)
        {
            if (h->next->symbol == NULL && _strcmp(h->symbol, "||") == 0)
            {
               return (nodes);
            }
            
            if (_strcmp(h->symbol, "||") == 0)
            {
                h = h->next;
            }
            else
            {
                h = h->next;
                break;/* add h = h->next */
            }

        }
        if (h == NULL)
        {
            break;
        }
        else
        {
            free_arr(&(sh->tokens), sh->num_tokens);
            free(sh->command);
            sh->command  = _strdup(h->str);
            remove_emptyspaces(&sh->command);
            sh->num_tokens = tokenize(&(sh->tokens), sh->command, " ");
		    if (get_built_in(sh, (sh->tokens)[0]))
            {
                get_built_in(sh, (sh->tokens)[0])(&sh);
                (sh->process_id)++;
                free_arr(&(sh->tokens), sh->num_tokens);
                free(sh->command);
                sh->command = NULL;
                flag = 1;
                continue;
            }
            if (sh->command != NULL)
            {
                free(sh->command);
                sh->command = NULL;
            }
            sh->command = check_cmd_exist(sh->tokens[0]);
            if (sh->command)
            {
                if (!hasSymbols(&sh))
                {
                    execute(sh, sh->tokens,  sh->environs);
                    h = h->next;
                    nodes++;
                    flag = 1;
                    free(sh->command);
                    sh->command = NULL;
                    continue;
                }
            }
            else
            {
                not_found(sh->prog_name, (sh->tokens)[0], sh->process_id, "not found");
                (sh->process_id)++;
                free(sh->command);
                sh->command = NULL;
            }
            free_arr(&(sh->tokens), sh->num_tokens);
            cleanup(sh);
            flag = 1;
        }

        nodes++;

    }

    return (nodes);
}